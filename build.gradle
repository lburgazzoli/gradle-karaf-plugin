
// *****************************************************************************
//
// *****************************************************************************

plugins {
    id 'java-library'
    id 'java-gradle-plugin'
    id 'groovy'
    id 'maven'
    id 'signing'
    id 'com.gradle.plugin-publish' version '0.21.0'
    id 'net.researchgate.release' version '2.8.1'
    id 'com.github.ben-manes.versions' version '0.29.0'
    id 'io.codearte.nexus-staging' version '0.21.2'
    id 'com.adarshr.test-logger' version '2.1.0'
}

// *****************************************************************************
//
// *****************************************************************************

group               = 'com.github.lburgazzoli'
description         = 'A Gradle plugin for Karaf'
sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

ext {
    isReleaseVersion  = !version.endsWith("SNAPSHOT")
    isSnapshotVersion = version.endsWith("SNAPSHOT")
    isCI              = Boolean.valueOf("$System.env.CI")
    isPR              = "false" != System.env.PR 
    gitRoot           = "https://github.com/lburgazzoli"
    gitProject        = "https://github.com/lburgazzoli/gradle-karaf-plugin"
    gitURL            = "git@github.com:lburgazzoli/gradle-karaf-plugin"
    groovyVersion     = GroovySystem.version.replaceAll(/\.\d+$/,'')
    gradleScriptDir   = "${rootProject.projectDir}/gradle"
    gradlePluginId    = "com.github.lburgazzoli.karaf"
    gradlePluginTags  = [ 'karaf' ]
    gradleCiTasks     = ['check']

    versions = [
        slf4j  : '1.7.21',
        paxUrl : '2.5.4',
        spock  : "1.2-groovy-${groovyVersion}"
    ]

    if (isReleaseVersion) {
        nexusUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    } else {
        nexusUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }

    if (!project.hasProperty('nexusUsername') && !project.hasProperty('nexusPassword')) {
        nexusUsername = "$System.env.CI_DEPLOY_USERNAME"
        nexusPassword = "$System.env.CI_DEPLOY_PASSWORD"
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    implementation "org.ops4j.pax.url:pax-url-aether:$versions.paxUrl"

    testImplementation("org.spockframework:spock-core:$versions.spock") {
        exclude(module: 'groovy-all')
    }
}

project.tasks.withType(org.gradle.api.tasks.compile.JavaCompile) {
    it.sourceCompatibility = project.sourceCompatibility
    it.targetCompatibility = project.targetCompatibility
}

project.tasks.withType(org.gradle.api.tasks.compile.GroovyCompile) {
    it.sourceCompatibility = project.sourceCompatibility
    it.targetCompatibility = project.targetCompatibility
}

jar {
    archiveBaseName = "${project.name}"

    manifest {
        attributes['Implementation-Title'   ] = "${group}.${project.name}-${project.version}"
        attributes['Implementation-Version' ] = project.version
        attributes['Implementation-Vendor'  ] = 'Luca Burgazzoli'
    }
}

testlogger {
    showStandardStreams false
    slowThreshold 30000
    theme 'mocha'
}

// *****************************************************************************
// ARTIFACTS
// *****************************************************************************

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier 'groovydoc'
    from groovydoc.destinationDir
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives groovydocJar
    archives javadocJar
}

// *****************************************************************************
// Publish to gradle Plugins
// *****************************************************************************

pluginBundle {
    website     = project.gitProject
    vcsUrl      = project.gitProject
    description = project.name
    tags        = gradlePluginTags

    plugins {
        karafPlugin {
            id          = gradlePluginId
            displayName = project.description
        }
    }
}
